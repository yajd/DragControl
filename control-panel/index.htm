<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>DragControl - Control Panel</title>
		<link rel="stylesheet" type="text/css" href="style/main.css">
		<script>			
			var droppables;
			var groups;
			var gWhat;
			function init(what) {
				var searchDiv = document.querySelector('#search');
				console.info('SearchEngines',SearchEngines);
				for (var i=0; i<SearchEngines.length; i++) {
					var searchThis = document.createElement('span');
					searchThis.setAttribute('class', 'droppable search-this');
					searchThis.setAttribute('style', 'background-image:url("' + SearchEngines[i].iconURL + '"); background-repeat:no-repeat; background-position:center center; background-size:cover;');
					searchThis.setAttribute('desc', 'Search ' + SearchEngines[i].name);
					searchThis.setAttribute('searchTemplate', SearchEngines[i].searchTemplate);
					searchThis.setAttribute('suggestTemplate', SearchEngines[i].suggestTemplate);
					searchDiv.insertBefore(searchThis, searchDiv.firstChild);
					console.log('added search engine = ' + SearchEngines[i].name);
				}
				droppables = document.querySelectorAll('.droppable');
				[].forEach.call(droppables, function(d, i) {
					for (var l in eventListeners) {
						d.addEventListener(l, eventListeners[l], false);
					}
				});
				gWhat = what;
				initFor(what);
				document.addEventListener('dragleave', function(e) {
					if (e.relatedTarget && e.relatedTarget.ownerDocument == document) {
						console.log('currently over iframe document e=', e);
						if (e.relatedTarget && e.relatedTarget.nodeName != 'HTML123' && e.relatedTarget.nodeName != 'iframe') {
							console.log('relatedTarget NOT NULL, NOT HTML123, NOT IFRAME so RETURN relatedTarget.nodeName == ', e.relatedTarget.nodeName);
							return;
						} else {
							console.log('continuing because e.relatedTarget is either null, html123, or iframe, e.relatedTarget.nodeName = ', e.relatedTarget);
						}
					}
					console.log('DRAG LEAVE FROM INDEX.HTM e =',e);
					initFor(gWhat);
				}, false);
			}
			
			function initFor(what) {
				switch (what) {
					case 'link':
						var show = ['copy','search','open-link'];
						break;
					case 'text':
						var show = ['search'];
						break;
					case 'image':
						var show = ['save-default-folder','save-browse-folder'];
						break;
					case 'download':
						var show = ['save-default-folder','save-browse-folder'];
						break;
					default:
						alert('error unknown init');
				}
				var mainDroppables = document.querySelectorAll('#main > .droppable');
				[].forEach.call(mainDroppables, function(d, i) {
					var dClasses = d.getAttribute('class').split(' ');
					//console.log(dClasses.join(','))
					var hideThis = true;
					for (var i=0; i<dClasses.length; i++) {
						if (show.indexOf(dClasses[i]) > -1) {
							hideThis = false;
							break;
						}
					}
					if (hideThis) {
						d.style.display = 'none';
					} else {
						d.style.display = 'inline-block';
					}
				});
				document.querySelector('#main').style.display = 'block';
				document.querySelector('#target').style.display = 'none';
				document.querySelector('#search').style.display = 'none';
				document.querySelector('#save_custom').style.display = 'none';
				var hovered = document.querySelector('#main > .hover');
				if (hovered) {
					hovered.classList.remove('hover');
				}
				console.log('init for done');
			}
			
			var eventListeners = {
				dragenter: function(e) {
					console.log('droppable dragenter e=',e);
					var d = e.target;
					var group = d.parentNode;
					var droppables = group.querySelectorAll('.droppable');
					[].forEach.call(droppables, function(d, i) {
						if (d == e.target) {
							d.classList.add('hover');
						} else {
							d.classList.remove('hover');
						}
					});
					console.log('drag entered on classList = ' + d.getAttribute('class'));
					if (d.classList.contains('search')) {
						var main = document.querySelector('#main');
						var search = document.querySelector('#search');
						main.style.display = 'none';
						search.style.display = 'block';
					} else if (d.classList.contains('open-link')) {
						var target = document.querySelector('#target');
						target.style.display = 'block';
					}
				},
				dragover: function(e) {
					e.preventDefault();
				},
				dragleave: function(e) {
					console.log('droppable dragleave e=',e);
					var d = e.target;
					//d.classList.remove('hover');
				},
				drop: function(e) {
					console.log('droppable drop e=',e);
				}
			}
		</script>
	</head>
	<body>
		<div id="wrap">
			<div id="function">
				Function: 
				<span>Nothing (Default)</span>
			</div>
			<div id="description">
				description
			</div>
			<div id="main" class="group">
				<span class="droppable open-link" desc="Search"> </span>
				<span class="droppable search" desc="Search"> </span>
				<span class="droppable copy" desc="Copy Text to Clipboard"> </span>
				<span class="droppable save-default-folder" desc="Default Folder"> </span>
				<span class="droppable save-browse-folder" desc="Browse Folders"> </span>
				<span class="droppable cancel" desc="Cancel - just hovering this should cancel it"> </span>
			</div>
			<div id="target" style="display:none;">
				<div class="group">
					<hr>
					<span class="droppable curtab" desc="Current Tab"></span>
					<span class="droppable newtab hover" desc="New Tab"> </span>
					<span class="droppable curwin" desc="Current Window"></span>
					<span class="droppable newwin" desc="New Window"> </span>
				</div>
				<div class="group">
					<hr>
					<span class="droppable foreground hover" desc="New Tab"> </span>
					<span class="droppable background" desc="Current Tab"> </span>
				</div>
			</div>
			<div id="search" class="group" style="display:none;">
				<!--todo: plan for future version
				<div id="autocompletion">
					<hr>
					autocompletion loads here
				</div>
				-->
			</div>
			<div id="save_custom" class="group" style="display:none;">
				
			</div>
		</div>
	</body>
</html>